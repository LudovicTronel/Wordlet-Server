{"ast":null,"code":"import { query, mutate, tx } from '@onflow/fcl';\nimport { GET_TOKEN_DATA } from \"../cadence/get-token-data.script\";\nimport { TRANSFER_WORD_TOKEN } from '../cadence/transfer-word-token.tx';\nexport default function useWordTokens() {\n  const getTokenData = async (setTokenData, tokenId) => {\n    try {\n      await query({\n        cadence: GET_TOKEN_DATA,\n        args: (arg, t) => [arg(tokenId, t.UInt64)]\n      }).then(function (data) {\n        setTokenData(data);\n      });\n    } catch (error) {\n      console.debug(\"use-wordtokens: getTokenData Failed\");\n      console.error(error);\n    }\n  };\n\n  const transferWordToken = async (address, tokenId) => {\n    try {\n      let transaction = await mutate({\n        cadence: TRANSFER_WORD_TOKEN,\n        limit: 100,\n        args: (arg, t) => [arg(address, t.Address), arg(tokenId, t.UInt64)]\n      });\n      console.log(\"TxID : \" + transaction);\n      await tx(transaction).onceSealed();\n      console.log(\"Transaction Effectuée\");\n    } catch (error) {\n      console.log(\"Transaction Echouée\");\n      console.error(error);\n    }\n  };\n\n  return {\n    getTokenData,\n    transferWordToken\n  };\n}","map":{"version":3,"sources":["C:/Users/ludot/OneDrive/Bureau/Wordlet-Server/client/src/hooks/use-wordtokens.hook.js"],"names":["query","mutate","tx","GET_TOKEN_DATA","TRANSFER_WORD_TOKEN","useWordTokens","getTokenData","setTokenData","tokenId","cadence","args","arg","t","UInt64","then","data","error","console","debug","transferWordToken","address","transaction","limit","Address","log","onceSealed"],"mappings":"AAAA,SAASA,KAAT,EAAgBC,MAAhB,EAAwBC,EAAxB,QAAkC,aAAlC;AAEA,SAASC,cAAT,QAA+B,kCAA/B;AACA,SAASC,mBAAT,QAAoC,mCAApC;AAEA,eAAe,SAASC,aAAT,GAA0B;AAErC,QAAMC,YAAY,GAAG,OAAOC,YAAP,EAAqBC,OAArB,KAAiC;AAClD,QAAI;AACA,YAAMR,KAAK,CAAC;AACRS,QAAAA,OAAO,EAAEN,cADD;AAERO,QAAAA,IAAI,EAAE,CAACC,GAAD,EAAMC,CAAN,KAAY,CACdD,GAAG,CAACH,OAAD,EAAUI,CAAC,CAACC,MAAZ,CADW;AAFV,OAAD,CAAL,CAMLC,IANK,CAMA,UAASC,IAAT,EAAe;AACjBR,QAAAA,YAAY,CAACQ,IAAD,CAAZ;AACH,OARK,CAAN;AAUH,KAXD,CAWE,OAAOC,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACC,KAAR,CAAc,qCAAd;AACAD,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACH;AACJ,GAhBD;;AAkBA,QAAMG,iBAAiB,GAAG,OAAQC,OAAR,EAAiBZ,OAAjB,KAA6B;AACnD,QAAI;AACA,UAAIa,WAAW,GAAG,MAAMpB,MAAM,CAAC;AAC3BQ,QAAAA,OAAO,EAAEL,mBADkB;AAE3BkB,QAAAA,KAAK,EAAE,GAFoB;AAG3BZ,QAAAA,IAAI,EAAE,CAACC,GAAD,EAAMC,CAAN,KAAY,CACdD,GAAG,CAACS,OAAD,EAAUR,CAAC,CAACW,OAAZ,CADW,EAEdZ,GAAG,CAACH,OAAD,EAAUI,CAAC,CAACC,MAAZ,CAFW;AAHS,OAAD,CAA9B;AAQAI,MAAAA,OAAO,CAACO,GAAR,CAAY,YAAYH,WAAxB;AACA,YAAMnB,EAAE,CAACmB,WAAD,CAAF,CAAgBI,UAAhB,EAAN;AACAR,MAAAA,OAAO,CAACO,GAAR,CAAY,uBAAZ;AACH,KAZD,CAYE,OAAOR,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACO,GAAR,CAAY,qBAAZ;AACAP,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACH;AACJ,GAjBD;;AAmBA,SAAO;AAAEV,IAAAA,YAAF;AAAgBa,IAAAA;AAAhB,GAAP;AACH","sourcesContent":["import { query, mutate, tx } from '@onflow/fcl'\r\n\r\nimport { GET_TOKEN_DATA } from \"../cadence/get-token-data.script\";\r\nimport { TRANSFER_WORD_TOKEN } from '../cadence/transfer-word-token.tx';\r\n\r\nexport default function useWordTokens( ) {\r\n\r\n    const getTokenData = async (setTokenData, tokenId) => {\r\n        try {\r\n            await query({\r\n                cadence: GET_TOKEN_DATA,\r\n                args: (arg, t) => [\r\n                    arg(tokenId, t.UInt64)\r\n                ]\r\n            })\r\n            .then(function(data) {\r\n                setTokenData(data)\r\n            })\r\n            \r\n        } catch (error) {\r\n            console.debug(\"use-wordtokens: getTokenData Failed\")\r\n            console.error(error)\r\n        }\r\n    }\r\n\r\n    const transferWordToken = async ( address, tokenId) => {\r\n        try {\r\n            let transaction = await mutate({\r\n                cadence: TRANSFER_WORD_TOKEN,\r\n                limit: 100,\r\n                args: (arg, t) => [\r\n                    arg(address, t.Address),\r\n                    arg(tokenId, t.UInt64)\r\n                ]\r\n            })\r\n            console.log(\"TxID : \" + transaction)\r\n            await tx(transaction).onceSealed()\r\n            console.log(\"Transaction Effectuée\")\r\n        } catch (error) {\r\n            console.log(\"Transaction Echouée\")\r\n            console.error(error)\r\n        }\r\n    }\r\n\r\n    return { getTokenData, transferWordToken }\r\n}"]},"metadata":{},"sourceType":"module"}