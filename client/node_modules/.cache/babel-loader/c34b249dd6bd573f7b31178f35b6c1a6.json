{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { query } from '@onflow/fcl';\nimport { GET_USER_WORDTOKENS } from \"../cadence/get-user-wordtokens.script\";\nimport useMarketHook from \"./use-market.hook\";\nexport default function useUserWordTokens(user) {\n  _s();\n\n  const [userWordTokens, setUserWordTokens] = useState(null);\n  const {\n    getCurrentUserSalelist\n  } = useMarketHook();\n  useEffect(() => getUserWordTokens(), [user]);\n\n  const getUserWordTokens = async () => {\n    if (user) {\n      try {\n        await query({\n          cadence: GET_USER_WORDTOKENS,\n          args: (arg, t) => [arg(user === null || user === void 0 ? void 0 : user.addr, t.Address)]\n        }).then(function (data) {\n          setUserWordTokens(data);\n        });\n      } catch (error) {\n        console.debug(\"Impossible de récupérer le collection de l'utilisateur\");\n        console.error(error);\n      }\n    }\n  };\n\n  return {\n    userWordTokens,\n    getUserWordTokens\n  };\n}\n\n_s(useUserWordTokens, \"wpYa/+MEGdQCJdFdN95sFV+z+0s=\", false, function () {\n  return [useMarketHook];\n});","map":{"version":3,"sources":["C:/Users/ludot/OneDrive/Bureau/Wordlet-Server/client/src/hooks/use-user-wordtokens.hook.js"],"names":["useEffect","useState","query","GET_USER_WORDTOKENS","useMarketHook","useUserWordTokens","user","userWordTokens","setUserWordTokens","getCurrentUserSalelist","getUserWordTokens","cadence","args","arg","t","addr","Address","then","data","error","console","debug"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,SAASC,KAAT,QAAsB,aAAtB;AACA,SAASC,mBAAT,QAAoC,uCAApC;AACA,OAAOC,aAAP,MAA0B,mBAA1B;AAEA,eAAe,SAASC,iBAAT,CAA4BC,IAA5B,EAAmC;AAAA;;AAC9C,QAAM,CAAEC,cAAF,EAAkBC,iBAAlB,IAAwCP,QAAQ,CAAC,IAAD,CAAtD;AACA,QAAM;AAAEQ,IAAAA;AAAF,MAA6BL,aAAa,EAAhD;AAEAJ,EAAAA,SAAS,CAAE,MAAMU,iBAAiB,EAAzB,EAA6B,CAAEJ,IAAF,CAA7B,CAAT;;AAEA,QAAMI,iBAAiB,GAAG,YAAY;AAClC,QAAIJ,IAAJ,EAAU;AACN,UAAI;AACA,cAAMJ,KAAK,CAAC;AACRS,UAAAA,OAAO,EAAER,mBADD;AAERS,UAAAA,IAAI,EAAE,CAACC,GAAD,EAAMC,CAAN,KAAY,CACdD,GAAG,CAACP,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAES,IAAP,EAAaD,CAAC,CAACE,OAAf,CADW;AAFV,SAAD,CAAL,CAMLC,IANK,CAMA,UAASC,IAAT,EAAe;AACjBV,UAAAA,iBAAiB,CAACU,IAAD,CAAjB;AACH,SARK,CAAN;AAUH,OAXD,CAWE,OAAOC,KAAP,EAAc;AACZC,QAAAA,OAAO,CAACC,KAAR,CAAc,wDAAd;AACAD,QAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACH;AACJ;AACJ,GAlBD;;AAoBA,SAAO;AAAEZ,IAAAA,cAAF;AAAkBG,IAAAA;AAAlB,GAAP;AACH;;GA3BuBL,iB;UAEeD,a","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nimport { query } from '@onflow/fcl'\r\nimport { GET_USER_WORDTOKENS } from \"../cadence/get-user-wordtokens.script\";\r\nimport useMarketHook from \"./use-market.hook\";\r\n\r\nexport default function useUserWordTokens( user ) {\r\n    const [ userWordTokens, setUserWordTokens ] = useState(null)\r\n    const { getCurrentUserSalelist } = useMarketHook( )\r\n\r\n    useEffect( () => getUserWordTokens(), [ user ] )\r\n\r\n    const getUserWordTokens = async () => {\r\n        if( user ){\r\n            try {\r\n                await query({\r\n                    cadence: GET_USER_WORDTOKENS,\r\n                    args: (arg, t) => [\r\n                        arg(user?.addr, t.Address)\r\n                    ]\r\n                })\r\n                .then(function(data) {\r\n                    setUserWordTokens(data)\r\n                })\r\n                \r\n            } catch (error) {\r\n                console.debug(\"Impossible de récupérer le collection de l'utilisateur\")\r\n                console.error(error)\r\n            }\r\n        }\r\n    }\r\n\r\n    return { userWordTokens, getUserWordTokens }\r\n}"]},"metadata":{},"sourceType":"module"}