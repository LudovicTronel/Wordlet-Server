{"ast":null,"code":"export const BUY_WORDTOKEN = `\nimport WordletContract from 0xWordlet\nimport WOToken from 0xWOToken\nimport MarketplaceContract from 0xMarketPlace\n\ntransaction (tokenId: UInt64, sellerAddress: Address){\n\n\tlet collectionRef: &AnyResource{WordletContract.NFTReceiver}\n\tlet temporaryVault: @WOToken.Vault\n\tlet saleRef: &AnyResource{MarketplaceContract.SalePublic}\n\n\tprepare(buyer: AuthAccount) {\n\t\t// Récupère le compte du propriétaire/vendeur\n\t\tlet seller = getAccount(sellerAddress)\n\t\t\n\t\t// Emprunte la référence de vente du propriétaire/vendeur\n\t\tself.saleRef = seller.getCapability<&AnyResource{MarketplaceContract.SalePublic}>(/public/NFTSale)\n\t\t\t.borrow()\n\t\t\t?? panic(\"Impossible d'emprunter la référence de vente du propriétaire\")\n\n\t\t// Emprunte la référence au wordlet de l'acheteur\n\t\tself.collectionRef = buyer.borrow<&AnyResource{WordletContract.NFTReceiver}>(from: /storage/NFTCollection)!\n\n\t\t// Emprunte la référence au WOTVault de l'acheteur\n\t\tlet vaultRef = buyer.borrow<&WOToken.Vault>(from: /storage/MainVault)\n\t\t\t?? panic(\"Impossible d'emprunter la référence au WOTVault de l'acheteur\")\n\n\t\t// Récupère le prix du token à acheter\n\t\tlet price = self.saleRef.idPrice(tokenID: tokenId)\n\t\t\t?? panic(\"Impossible de trouver le prix du token correspondant\")\n\n\t\tself.temporaryVault <- vaultRef.withdraw(amount: price)\n\t}\n\n\texecute {\n\t\tself.saleRef.purchase(tokenID: tokenId, recipient: self.collectionRef, buyTokens: <-self.temporaryVault)\n\t}\n}\n`;","map":{"version":3,"sources":["C:/Users/ludot/OneDrive/Bureau/Wordlet-Server/client/src/cadence/buy-wordtoken.tx.js"],"names":["BUY_WORDTOKEN"],"mappings":"AAAA,OAAO,MAAMA,aAAa,GAAE;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAtCO","sourcesContent":["export const BUY_WORDTOKEN=`\r\nimport WordletContract from 0xWordlet\r\nimport WOToken from 0xWOToken\r\nimport MarketplaceContract from 0xMarketPlace\r\n\r\ntransaction (tokenId: UInt64, sellerAddress: Address){\r\n\r\n\tlet collectionRef: &AnyResource{WordletContract.NFTReceiver}\r\n\tlet temporaryVault: @WOToken.Vault\r\n\tlet saleRef: &AnyResource{MarketplaceContract.SalePublic}\r\n\r\n\tprepare(buyer: AuthAccount) {\r\n\t\t// Récupère le compte du propriétaire/vendeur\r\n\t\tlet seller = getAccount(sellerAddress)\r\n\t\t\r\n\t\t// Emprunte la référence de vente du propriétaire/vendeur\r\n\t\tself.saleRef = seller.getCapability<&AnyResource{MarketplaceContract.SalePublic}>(/public/NFTSale)\r\n\t\t\t.borrow()\r\n\t\t\t?? panic(\"Impossible d'emprunter la référence de vente du propriétaire\")\r\n\r\n\t\t// Emprunte la référence au wordlet de l'acheteur\r\n\t\tself.collectionRef = buyer.borrow<&AnyResource{WordletContract.NFTReceiver}>(from: /storage/NFTCollection)!\r\n\r\n\t\t// Emprunte la référence au WOTVault de l'acheteur\r\n\t\tlet vaultRef = buyer.borrow<&WOToken.Vault>(from: /storage/MainVault)\r\n\t\t\t?? panic(\"Impossible d'emprunter la référence au WOTVault de l'acheteur\")\r\n\r\n\t\t// Récupère le prix du token à acheter\r\n\t\tlet price = self.saleRef.idPrice(tokenID: tokenId)\r\n\t\t\t?? panic(\"Impossible de trouver le prix du token correspondant\")\r\n\r\n\t\tself.temporaryVault <- vaultRef.withdraw(amount: price)\r\n\t}\r\n\r\n\texecute {\r\n\t\tself.saleRef.purchase(tokenID: tokenId, recipient: self.collectionRef, buyTokens: <-self.temporaryVault)\r\n\t}\r\n}\r\n`"]},"metadata":{},"sourceType":"module"}