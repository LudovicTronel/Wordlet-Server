{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ludot\\\\OneDrive\\\\Bureau\\\\Wordlet-Server\\\\client\\\\src\\\\components\\\\Decoy.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport io from \"socket.io-client\";\nimport Header from \"./Header\";\nimport Providers from \"../providers/Providers.comp\";\nimport WaitingArea from \"./WaitingArea\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar socket = ' '; //Objet joueur\n\nconst player = {\n  socketId: \"\",\n  username: \"\",\n  host: false,\n  roomId: null,\n  turn: false,\n  listWords: [],\n  playedWord: \"\",\n  win: false\n};\n\nconst Decoy = () => {\n  _s();\n\n  //Hooks nécessaires à la récupération de la liste des salons, du pseudo du joueur, du nom du salon et du passage à la fenêtre d'attente\n  var [listRooms, setListRooms] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [nameRoom, setNameRoom] = useState(\"\");\n  const [wait, setWait] = useState(false); //Code effectué à la montée du component, comparable à un ComponentDidMount()\n\n  useEffect(() => {\n    socket = io(); //Vérifier proxy package.json pour l'hebergement sinon : socket = io.connect('http://localhost:5000')\n\n    socket.emit('get rooms');\n    socket.on('list rooms', rooms => {\n      var list = '';\n\n      if (rooms.length > 0) {\n        rooms.forEach(room => {\n          if (room.players.length !== 6) {\n            list += `<ul>\n                                    <center><p id = \"displayRooms\"> Salon ${room.name} de ${room.players[0].username} ${room.players.length}/6 </p></center>\n                                    <center><button id = createButton data-room = ${room.id}> Rejoindre </button></center>\n                                </ul>`;\n          }\n        });\n      }\n\n      setListRooms(listRooms + list);\n    }); //Code effectué à la descente(?) du component, comparable à un ComponentWillUnMount()\n\n    return () => {\n      socket.disconnect();\n    };\n  }, []); //Créer un salon\n\n  const createRoom = () => {\n    player.socketId = socket.id;\n    player.username = username;\n    player.host = true;\n    player.turn = true; //A modifier pour que ce soit aléatoire après ? \n\n    setWait(true);\n    socket.emit('playerData', player, nameRoom);\n  }; //Rafraîchi la page afin d'avoir accès aux nouveaux salons  \n\n\n  const reloadPage = () => {\n    window.location.reload();\n  };\n\n  return /*#__PURE__*/_jsxDEV(Providers, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"salons\",\n        children: !wait ? /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"settings\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \" Cr\\xE9er un salon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Pseudo\",\n            onChange: event => {\n              setUsername(event.target.value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Nom du salon\",\n            id: \"inputNameRoom\",\n            onChange: event => {\n              setNameRoom(event.target.value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: createRoom,\n            id: \"createButton\",\n            children: \"Cr\\xE9er\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \" Salons disponibles \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"settings\",\n            onChange: \"\",\n            dangerouslySetInnerHTML: {\n              __html: listRooms\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: reloadPage,\n            children: \"Rafraichir\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 8\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(WaitingArea, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"marche.png\",\n        id: \"marche\",\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Decoy, \"A3sHd3fOVA2jG0CPjV4c7A+go48=\");\n\n_c = Decoy;\nexport default Decoy;\n\nvar _c;\n\n$RefreshReg$(_c, \"Decoy\");","map":{"version":3,"sources":["C:/Users/ludot/OneDrive/Bureau/Wordlet-Server/client/src/components/Decoy.js"],"names":["React","useState","useEffect","io","Header","Providers","WaitingArea","socket","player","socketId","username","host","roomId","turn","listWords","playedWord","win","Decoy","listRooms","setListRooms","setUsername","nameRoom","setNameRoom","wait","setWait","emit","on","rooms","list","length","forEach","room","players","name","id","disconnect","createRoom","reloadPage","window","location","reload","event","target","value","__html"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport  io from \"socket.io-client\";\r\n\r\nimport Header from \"./Header\";\r\nimport Providers from \"../providers/Providers.comp\";\r\n\r\nimport WaitingArea from \"./WaitingArea\";\r\n\r\nvar socket = ' ';\r\n\r\n//Objet joueur\r\nconst player = {\r\n    socketId : \"\",\r\n    username : \"\",\r\n    host : false,\r\n    roomId : null,\r\n    turn : false,\r\n    listWords : [],\r\n    playedWord : \"\",\r\n    win : false\r\n};\r\n\r\nconst Decoy = () =>{\r\n\r\n\t//Hooks nécessaires à la récupération de la liste des salons, du pseudo du joueur, du nom du salon et du passage à la fenêtre d'attente\r\n    var [listRooms, setListRooms] = useState(\"\");\r\n\tconst [username, setUsername] = useState(\"\");\r\n    const [nameRoom, setNameRoom] = useState(\"\");\r\n    const [wait, setWait] = useState(false);\r\n\r\n\t//Code effectué à la montée du component, comparable à un ComponentDidMount()\r\n    useEffect( () => {\r\n        socket = io(); //Vérifier proxy package.json pour l'hebergement sinon : socket = io.connect('http://localhost:5000')\r\n        socket.emit('get rooms');\r\n        socket.on('list rooms', (rooms) => {  \r\n\r\n            var list = '';\r\n\r\n            if (rooms.length > 0) {\r\n                rooms.forEach(room => {\r\n                    if (room.players.length !== 6 ) {\r\n                        list += `<ul>\r\n                                    <center><p id = \"displayRooms\"> Salon ${room.name} de ${room.players[0].username} ${room.players.length}/6 </p></center>\r\n                                    <center><button id = createButton data-room = ${room.id}> Rejoindre </button></center>\r\n                                </ul>`;\r\n                    }\r\n                });\r\n            }\r\n            setListRooms(listRooms + list);\r\n        });\r\n\t\t//Code effectué à la descente(?) du component, comparable à un ComponentWillUnMount()\r\n        return () => {\r\n            socket.disconnect();\r\n        }\r\n    }, [])\r\n\r\n    //Créer un salon\r\n    const createRoom = () => {\r\n\r\n        player.socketId = socket.id;\r\n        player.username = username;\r\n        player.host = true;\r\n        player.turn = true; //A modifier pour que ce soit aléatoire après ? \r\n        setWait(true);\r\n        \r\n        socket.emit('playerData', player, nameRoom);\r\n    }\r\n\r\n\t//Rafraîchi la page afin d'avoir accès aux nouveaux salons  \r\n\tconst reloadPage = () => {\r\n\t\twindow.location.reload();\r\n\t}\r\n\r\n    return(\r\n        <Providers>\r\n            <Header/>\r\n            <section>\r\n                <div id = \"salons\">\r\n                    {!wait ? (\r\n                        <div id = \"settings\">\r\n                            <h3> Créer un salon</h3>\r\n                            <input\r\n                                type=\"text\"\r\n                                placeholder=\"Pseudo\"\r\n                                onChange={(event) => {\r\n                                setUsername(event.target.value);\r\n                                }}\r\n                            />\r\n                            <input\r\n                                type=\"text\"\r\n                                placeholder=\"Nom du salon\"\r\n                                id = \"inputNameRoom\"\r\n                                onChange={(event) => {\r\n                                setNameRoom(event.target.value);\r\n                                }}\r\n                            />\r\n                            <button onClick={createRoom} id = \"createButton\">Créer</button>\r\n                            <h3> Salons disponibles </h3>\r\n                            <div id = \"settings\" onChange = '' dangerouslySetInnerHTML = {{__html: listRooms}}/>\r\n\t\t\t\t\t\t\t<button onClick = {reloadPage}>Rafraichir</button>\r\n                        </div>\r\n\t\t\t\t\t\t\r\n                    ) : (\r\n                        <WaitingArea />\r\n                    )}\r\n                </div>\r\n                <img src=\"marche.png\" id=\"marche\" alt=\"\"/>\r\n            </section>\r\n        </Providers>\r\n    )\r\n}\r\n\r\nexport default Decoy;"]},"metadata":{},"sourceType":"module"}