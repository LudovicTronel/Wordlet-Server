{"ast":null,"code":"export const TRANSFER_WORD_TOKEN = `\nimport WordletContract from 0xWordlet\n\n/*\nTransfère un NFT du signataire au compte dont l'adresse est passé en paramètre\n */\n\ntransaction (address: Address, tokenId: UInt64){\n\n    let collection: @WordletContract.Collection\n    let metadata: {String: String}\n\n    prepare(account: AuthAccount) {\n\n        self.collection <- WordletContract.createEmptyCollection()\n\n        let collectionRef = account.borrow<&WordletContract.Collection>(from: /storage/NFTCollection)\n            ?? panic(\"Impossible d'emprunter la référence à la Collection du propriétaire\")\n\n        self.metadata = collectionRef.getMetadata(id: tokenId)\n\n        self.collection.deposit(token: <- collectionRef.withdraw(withdrawID: tokenId), metadata: self.metadata)\n    }\n\n    execute {\n\n        let recepteur = getAccount(address)\n\n        let receiverRef = recepteur.getCapability<&{WordletContract.NFTReceiver}>(/public/NFTReceiver)\n            .borrow()\n            ?? panic(\"Impossible d'emprunter la référence Receiver\")\n\n        receiverRef.deposit(token: <-self.collection.withdraw(withdrawID: tokenId), metadata: self.metadata)\n\n        destroy self.collection\n\n        log(\"Transfer effectué\")\n    }\n\n}\n`;","map":{"version":3,"sources":["C:/Users/ludot/OneDrive/Bureau/Wordlet-Server/client/src/cadence/transfer-word-token.tx.js"],"names":["TRANSFER_WORD_TOKEN"],"mappings":"AAAA,OAAO,MAAMA,mBAAmB,GAAI;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAxCO","sourcesContent":["export const TRANSFER_WORD_TOKEN = `\r\nimport WordletContract from 0xWordlet\r\n\r\n/*\r\nTransfère un NFT du signataire au compte dont l'adresse est passé en paramètre\r\n */\r\n\r\ntransaction (address: Address, tokenId: UInt64){\r\n\r\n    let collection: @WordletContract.Collection\r\n    let metadata: {String: String}\r\n\r\n    prepare(account: AuthAccount) {\r\n\r\n        self.collection <- WordletContract.createEmptyCollection()\r\n\r\n        let collectionRef = account.borrow<&WordletContract.Collection>(from: /storage/NFTCollection)\r\n            ?? panic(\"Impossible d'emprunter la référence à la Collection du propriétaire\")\r\n\r\n        self.metadata = collectionRef.getMetadata(id: tokenId)\r\n\r\n        self.collection.deposit(token: <- collectionRef.withdraw(withdrawID: tokenId), metadata: self.metadata)\r\n    }\r\n\r\n    execute {\r\n\r\n        let recepteur = getAccount(address)\r\n\r\n        let receiverRef = recepteur.getCapability<&{WordletContract.NFTReceiver}>(/public/NFTReceiver)\r\n            .borrow()\r\n            ?? panic(\"Impossible d'emprunter la référence Receiver\")\r\n\r\n        receiverRef.deposit(token: <-self.collection.withdraw(withdrawID: tokenId), metadata: self.metadata)\r\n\r\n        destroy self.collection\r\n\r\n        log(\"Transfer effectué\")\r\n    }\r\n\r\n}\r\n`"]},"metadata":{},"sourceType":"module"}