{"ast":null,"code":"export const LIST_TOKEN_FOR_SALE = `\nimport WordletContract, WOToken, MarketplaceContract from 0x1f7da62a915f01c7\n\ntransaction (tokenId: UInt64, value: UFix64){\n\n    prepare(acct: AuthAccount) {\n        let sale = acct.borrow<&MarketplaceContract.SaleCollection>(from: /storage/NFTSale)\n            ?? panic(\"Impossible d'emprunter la ressource de vente\")\n\n        let collectionRef = acct.borrow<&WordletContract.Collection>(from: /storage/NFTCollection)\n            ?? panic(\"Impossible d'emprunter la référence à la collection\")\n\n        sale.listForSale(token: <- collectionRef.withdraw(withdrawID: tokenId), price: value)\n    }\n}\n`;","map":{"version":3,"sources":["C:/Users/ludot/OneDrive/Bureau/Wordlet-Server/client/src/cadence/list-token-for-sale.tx.js"],"names":["LIST_TOKEN_FOR_SALE"],"mappings":"AAAA,OAAO,MAAMA,mBAAmB,GAAE;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAfO","sourcesContent":["export const LIST_TOKEN_FOR_SALE=`\r\nimport WordletContract, WOToken, MarketplaceContract from 0x1f7da62a915f01c7\r\n\r\ntransaction (tokenId: UInt64, value: UFix64){\r\n\r\n    prepare(acct: AuthAccount) {\r\n        let sale = acct.borrow<&MarketplaceContract.SaleCollection>(from: /storage/NFTSale)\r\n            ?? panic(\"Impossible d'emprunter la ressource de vente\")\r\n\r\n        let collectionRef = acct.borrow<&WordletContract.Collection>(from: /storage/NFTCollection)\r\n            ?? panic(\"Impossible d'emprunter la référence à la collection\")\r\n\r\n        sale.listForSale(token: <- collectionRef.withdraw(withdrawID: tokenId), price: value)\r\n    }\r\n}\r\n`"]},"metadata":{},"sourceType":"module"}